// Generated by CoffeeScript 1.3.3
(function() {

  $.fn.SpaceFrame = function() {
    return this.each(function() {
      var bottomPanels, clipPanels, contents, leftPanels, maxContentHeight, maxContentWidth, panelFour, panelIndex, panelOne, panelThree, panelTwo, restrictAxis, rightPanels, scrubber, topPanels;
      scrubber = $(this).find('.space-scrubber');
      contents = $(this).find('.space-panel');
      panelOne = $(contents.get(0));
      panelTwo = $(contents.get(1));
      panelThree = $(contents.get(2));
      panelFour = $(contents.get(3));
      if ($(this).hasClass('x')) {
        if (contents.length !== 2) {
          console.warn('There should only be 2 panels for a x axis space frame!');
        }
        restrictAxis = 'x';
      } else if ($(this).hasClass('y')) {
        if (contents.length !== 2) {
          console.warn('There should only be 2 panels for a y axis space frame!');
        }
        restrictAxis = 'y';
      }
      maxContentWidth = null;
      maxContentHeight = null;
      panelIndex = contents.length;
      leftPanels = panelOne.add(panelThree);
      rightPanels = panelTwo.add(panelFour);
      topPanels = panelOne.add(panelTwo);
      bottomPanels = panelThree.add(panelFour);
      $(this).css({
        width: function() {
          contents.each(function() {
            if (!$(this).is(':empty')) {
              return maxContentWidth = Math.max(maxContentWidth, $(this).width());
            }
          });
          return maxContentWidth;
        },
        height: function() {
          contents.each(function() {
            if (!$(this).is(':empty')) {
              return maxContentHeight = Math.max(maxContentHeight, $(this).height());
            }
          });
          return maxContentHeight;
        }
      });
      leftPanels.css({
        left: 0
      });
      rightPanels.css({
        right: 0
      });
      topPanels.css({
        top: 0
      });
      bottomPanels.css({
        bottom: 0
      });
      scrubber.css({
        marginTop: (scrubber.height() / 2) * -1,
        marginBottom: (scrubber.height() / 2) * -1,
        marginLeft: (scrubber.width() / 2) * -1,
        marginRight: (scrubber.width() / 2) * -1
      });
      contents.each(function() {
        $(this).css({
          zIndex: panelIndex
        });
        return panelIndex--;
      });
      clipPanels = function(xPos, yPos) {
        if (restrictAxis === 'y') {
          panelTwo = panelFour;
        }
        xPos = restrictAxis === 'y' ? maxContentWidth : xPos;
        yPos = restrictAxis === 'x' ? maxContentHeight : yPos;
        panelOne.stop().animate({
          fontSize: 100
        }, {
          step: function(now, fx) {
            return $(this).css({
              clip: 'rect(0px, ' + xPos + 'px, ' + yPos + 'px, 0px)'
            });
          }
        }, 10000);
        panelTwo.stop().animate({
          fontSize: 100
        }, {
          step: function(now, fx) {
            return $(this).css({
              clip: 'rect(0px, ' + maxContentWidth + 'px, ' + yPos + 'px, ' + xPos + 'px)'
            });
          }
        }, 10000);
        panelThree.stop().animate({
          fontSize: 100
        }, {
          step: function(now, fx) {
            return $(this).css({
              clip: 'rect(' + yPos + 'px, ' + xPos + 'px, ' + maxContentHeight + 'px, 0px)'
            });
          }
        }, 10000);
        return panelFour.stop().animate({
          fontSize: 100
        }, {
          step: function(now, fx) {
            return $(this).css({
              clip: 'rect(' + yPos + 'px, ' + maxContentWidth + 'px, ' + maxContentHeight + 'px, ' + xPos + 'px)'
            });
          }
        }, 10000);
      };
      scrubber.draggable({
        containment: 'parent',
        drag: function(e, ui) {
          return clipPanels(ui.position.left, ui.position.top);
        }
      });
      if (restrictAxis) {
        scrubber.draggable('option', 'axis', restrictAxis);
      }
      scrubber.on({
        touchmove: function(e) {
          var xPos, yPos;
          e.preventDefault();
          xPos = e.originalEvent.changedTouches[0].pageX;
          return yPos = e.originalEvent.changedTouches[0].pageY;
        }
      });
      return clipPanels(250, 250);
    });
  };

}).call(this);
